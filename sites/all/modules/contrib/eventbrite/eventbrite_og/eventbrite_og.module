<?php

// TODO: Add eventbrite_og_requirements (copy from Eventbrite Blocks)

// Selective groups states. chosen by the group admin
define ('EVENTBRITE_OG_DISABLED', 0);
define ('EVENTBRITE_OG_CUSTOM', 1);
define ('EVENTBRITE_OG_SUBUSER', 2);

/**
 * Implementation of hook_menu().
 */
function eventbrite_og_menu() {
  $items = array();
  
  /* TODO: Payment settings by group not currently supported
  $items['eventbrite_og/payment-settings/%node'] = array(
    // TODO: Add group name to title field
    'title' => t('Eventbrite default payment settings for group'),
    'description' => t('Default payment settings for Eventbrite events created within this group'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_og_default_payment_settings', 2),
    // TODO: Add group admin check for permissions
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'eventbrite_og.pages.inc',
  );
  */
  
  /* Venues by group will not be supported, should just create venues with events
  $items['node/%node/event-venues'] = array(
    // TODO: Add group name to title field
    'title' => 'Eventbrite venues for group',
    'description' => 'Venues for Eventbrite events created within this group',
    'page callback' => 'eventbrite_og_venue_list',
    'page arguments' => array(2),
    // TODO: Add group admin check for permissions
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'eventbrite_og.pages.inc',
  );
  
  $items['eventbrite_og/%node/venues/list'] = array(
    // TODO: Add group name to title field
    'title' => 'List Venues',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'eventbrite_og.pages.inc',
  );
  
  $items['eventbrite_og/%node/venues/add'] = array(
    'title' => 'Add Venue',
    'description' => 'Add an Eventbrite venue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_venue_form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_user_default_payment_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'eventbrite_og.pages.inc',
  );
  */
  
  return $items;
}

/**
 * Implementation of the hook_permissions()
 */
function eventbrite_og_perm() {
  return array('administer eventbrite group accounts');
}

/**
 * Implementation of hook_nodeapi().
 */
function eventbrite_og_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // If this node is a group type
  if (og_is_group_type($node->type)) {
    switch ($op) {
      case 'load':
        $node->eventbrite_og_enabled = 0;
        $node->eventbrite_og_user_key = '';
        $node->eventbrite_og_enabled_organizers = array();
        $node->eventbrite_og_enabled_venues = array();
//          $node->eventbrite_og_default_organizer = 0;

        $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = %d', $node->nid);
        if ($row = db_fetch_object($result)) {
          $node->eventbrite_og_enabled = $row->eventbrite_og_enabled;
          $node->eventbrite_og_user_key = $row->eventbrite_og_user_key;

          switch ($node->eventbrite_og_enabled) {
            case EVENTBRITE_OG_CUSTOM:
              // Fill in organizers from custom key--this will likely require hitting the Eventbrite server
              $custom_organizers = eventbrite_get('user_list_organizers');
              $node->eventbrite_og_enabled_organizers;
              break;
            case EVENTBRITE_OG_SUBUSER:
              if (module_exists('eventbrite_subuser')) {
                // TODO: Fill in organizer from subuser
                $subuser = eventbrite_subuser_load($node->eventbrite_og_user_key, 'user_key');

                $node->eventbrite_og_enabled_organizers = $subuser->enabled_organizers;
                $node->eventbrite_og_enabled_venues = $subuser->enabled_venues;
              }
              break;
          }
        }
        else {
          $node->eventbrite_og_enabled = 0;
          $node->eventbrite_og_user_key = '';
          $node->eventbrite_og_enabled_organizers = array();
          $node->eventbrite_og_enabled_venues = array();
//          $node->eventbrite_og_default_organizer = 0;
        }
        break;

      case 'prepare':
        break;

      case 'insert':
      case 'update':
        _eventbrite_og_group_submit($node);
        break;

      case 'delete':
        // TODO: delete group subuser when group is deleted?  Just here or on Eventbrite?
        /*
        $sql = "DELETE FROM {eventbrite_og} WHERE nid = %d";
        db_query($sql, $node->nid);
        */
        break;
    }
  }
}

/*
 * This is in a function so that it's easier to hack later
 */
function _eventbrite_og_auth_methods() {
  $options = array(
    EVENTBRITE_OG_CUSTOM => t('Allow site admins to enter a user key for the group to authenticate with Eventbrite'),
  );
  if (module_exists('eventbrite_subuser')) {
    $options[EVENTBRITE_OG_SUBUSER] = t('Allow site admins to select a subuser for authentication (from primary account subusers)');
  }
  return $options;
}

function eventbrite_og_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;
  if (og_is_group_type($type)) {
    // This is a group type so add form elements for eventbrite_og
    $form['og']['eventbrite_og_auth_method'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Eventbrite authentication methods for Organic Groups integration '),
      '#options' => _eventbrite_og_auth_methods(),
      '#default_value' => variable_get('eventbrite_og_auth_method_'. $type, array()),
      '#description' => t('You must select at least one of these authentication methods to enable Eventbrite integration for this group type'),
      '#weight' => 10,
    );

    $form['#submit'][] = 'eventbrite_og_node_type_form_submit';
  }
}

function eventbrite_og_node_type_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $auth_methods = array();
  foreach ($form_values['eventbrite_og_auth_method'] as $key => $value) {
    if ($value) {
      $auth_methods[$key] = $key;
    }
  }
  variable_set('eventbrite_og_auth_method_'. $form_values['type'], $auth_methods);
}

function eventbrite_og_get_account_options($type) {
  $account_options = array();

  if ($allowed_options = variable_get('eventbrite_og_auth_method_'. $type, array())) {
    $account_options[EVENTBRITE_OG_DISABLED] = t('Do not enable Eventbrite integration for this group');
    if ($allowed_options[EVENTBRITE_OG_CUSTOM]) {
      $account_options[EVENTBRITE_OG_CUSTOM] = t('Enter an Eventbrite user key to use as the Eventbrite account');
    }
    if (module_exists('eventbrite_subuser')) {
      if ($allowed_options[EVENTBRITE_OG_SUBUSER]) {
        $account_options[EVENTBRITE_OG_SUBUSER] = t('Create a subuser account under the primary Eventbrite account');
      }
    }
  }

  return $account_options;
}

function eventbrite_og_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node'])) {
    $node = $form['#node'];
    if ($form_id == $node->type .'_node_form' && og_is_group_type($node->type)) {
      if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_'. $node->type, array())) {
        if (user_access('administer eventbrite group accounts')) {
          drupal_add_js(drupal_get_path('module', 'eventbrite_og')  .'/eventbrite_og.js', 'module');

          $form['eventbrite_og'] = array(
            '#type' => 'fieldset',
            '#title' => t('Eventbrite Settings'),
          );

          $form['eventbrite_og']['eventbrite_og_enabled'] = array(
            '#type' => 'radios',
            '#title' => t('Eventbrite Groups Integration'),
            '#options' => eventbrite_og_get_account_options($node->type),
            '#required' => 1,
            '#default_value' => $node->eventbrite_og_enabled,
            '#attributes' => array('class' => 'eventbrite_og-enabled'),
          );

          if (isset($allowed_auth_methods[EVENTBRITE_OG_CUSTOM])) {
            $form['eventbrite_og']['eventbrite_og_user_key'] = array(
              '#type' => 'textfield',
              '#title' => t('User key'),
              // TODO: get link for user key
              '#description' => t('Please enter the user key to use for Eventbrite integration within this group.  You can find the user key at ...'),
              '#default_value' => (EVENTBRITE_OG_CUSTOM == $node->eventbrite_og_enabled) ? $node->eventbrite_og_user_key : '',
              '#attributes' => array('class' => 'eventbrite_og-user-key'),
            );
          }

          if (isset($allowed_auth_methods[EVENTBRITE_OG_SUBUSER])) {
            if (module_exists('eventbrite_subuser')) {
              $subuser_emails = array_values(eventbrite_subuser_get_enabled());

              $form['eventbrite_og']['eventbrite_subuser_email'] = array(
                '#type' => 'select',
                '#title' => t('Subuser Account'),
                '#options' => array_combine($subuser_emails, $subuser_emails),
                '#description' => t('Please select the subuser account to use for Eventbrite integration within this group.'),
                '#default_value' => eventbrite_subuser_get_email($node->eventbrite_og_user_key),
//                '#default_value' => $node->eventbrite_og_user_key,
                '#attributes' => array('class' => 'eventbrite_og-user-key'),
              );
            }
          }          

          $form['#validate'][] = 'eventbrite_og_group_node_validate';
        }
      }
    }
  }
}

function eventbrite_og_group_node_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  if ($form_values['eventbrite_og_enabled']) {
//    drupal_set_message('ok, some form of og integration for eventbrite is still enabled');
    $node = $form['#node'];
    if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_'. $node->type, array())) {
      if (isset($allowed_auth_methods[$form_values['eventbrite_og_enabled']])) {
        if (EVENTBRITE_OG_CUSTOM == $form_values['eventbrite_og_enabled']) {
          if (empty($form_values['eventbrite_og_user_key'])) {
            form_set_error('eventbrite_og_user_key', t('You must enter a user key for the group account to enable Eventbrite integration.'));
          }
          if (!eventbrite_get('user_get_by_key', $form_values['eventbrite_og_user_key'])) {
            form_set_error('eventbrite_og_user_key', t('The Eventbrite API is not accepting that user key.'));
            return;
          }
        }
        if (EVENTBRITE_OG_SUBUSER == $form_values['eventbrite_og_enabled']) {
          if (module_exists('eventbrite_subuser')) {
            if (empty($form_values['eventbrite_subuser_email'])) {
              form_set_error('eventbrite_subuser', t('You must select a subuser for the group account to enable Eventbrite integration.'));
            }
            if ($subuser = eventbrite_subuser_load($form_values['eventbrite_subuser_email'], 'email')) {
              if (!eventbrite_get('user_get_by_key', $subuser->user_key)) {
                form_set_error('eventbrite_subuser', t('The Eventbrite API is not authenticating that subuser.'));
                return;
              }
            }
            else {
              form_set_error('eventbrite_subuser', t('The email you entered does not match any subuser accounts.'));
            }
            // TODO: Test that at least one organizer is enabled for this subuser group
            // $form_values['eventbrite_enabled_organizers'];
          }
        }
      }
      else {
        // TODO: Set an error here, chosen method does not match available methods
      }
    }
  }
}

function _eventbrite_og_group_submit($node) {
  $eventbrite_og = array(
    'nid' => $node->nid,
    'eventbrite_og_enabled' => EVENTBRITE_OG_DISABLED,
    'eventbrite_og_user_key' => '',
    'eventbrite_og_enabled_organizers' => array(),
    'eventbrite_og_enabled_venues' => array(),
  );

  if ($node->eventbrite_og_enabled) {
    if ($allowed_auth_methods = variable_get('eventbrite_og_auth_method_'. $node->type, array())) {
      if (isset($allowed_auth_methods[$node->eventbrite_og_enabled])) {
        if (EVENTBRITE_OG_CUSTOM == $node->eventbrite_og_enabled) {
          $eventbrite_og['eventbrite_og_user_key'] = $node->eventbrite_og_user_key;
          $eventbrite_og['eventbrite_og_enabled'] = EVENTBRITE_OG_CUSTOM;
          // If there is a group context, fetch or
        }
        if (EVENTBRITE_OG_SUBUSER == $node->eventbrite_og_enabled) {
          if (module_exists('eventbrite_subuser')) {
            if ($subuser = eventbrite_subuser_load($node->eventbrite_subuser_email, 'email')) {
              $eventbrite_og['eventbrite_og_user_key'] = $subuser->user_key;
              $eventbrite_og['eventbrite_og_enabled'] = EVENTBRITE_OG_SUBUSER;
//              $eventbrite_og['eventbrite_og_enabled_organizers'] = array();
//              $eventbrite_og['eventbrite_og_enabled_venues'] = array();
            }
          }
        }
      }
    }
  }

  // Need to check if there is a row here already
  $result = db_query('SELECT * FROM {eventbrite_og} WHERE nid = %d', $node->nid);
  if ($db_row = db_fetch_object($result)) {
    drupal_write_record('eventbrite_og', $eventbrite_og, array('nid'));
  }
  else {
    drupal_write_record('eventbrite_og', $eventbrite_og);
  }
}

/**
* Implementation of hook_og_link_alter().
*/
function eventbrite_og_og_links_alter(&$links, $group_node) {
  // TODO: check if this is group admin
  if ($group_node->eventbrite_og_enabled) {
    // TODO: allow editing of venues by group
    $links['eventbrite_og_venues'] = l('Group venues', 'node/'. $group_node->nid .'/event-venues');
    // TODO: allow editing of payment settings by group
//    $links['eventbrite_og_payment_settings'] = l('Group payment settings', 'eventbrite_og/payment-settings/'. $group_node->nid);
  }
}
  
/**
 * Implementation of hook_field_access().
 *
 * IF there is a group context and IF Eventbrite has not been enabled for this group,
 *   then boot the field
 */
function eventbrite_og_field_access($op, $field, $account, $node = NULL) {
  if ($field['type'] == 'eventbrite_cck') {
    switch ($op) {
      case 'view':
      case 'edit':
        // Check if there is a group context
        if (og_is_group_post_type($node->type) && ($group_node = og_get_group_context($node->type))) {
          $allowed_auth_methods = variable_get('eventbrite_og_auth_method_'. $group_node->type, array());
          if (empty($allowed_auth_methods)) {
            // Do not show this field if the group type has not been Eventbrite enabled.
            return FALSE;            
          }
          if (!$group_node->eventbrite_og_enabled) {
            // Do not show this field if the group node has not been Eventbrite enabled.
            return FALSE;
          }
        }
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_eventbrite_request_alter(&$request).
 */
function eventbrite_og_eventbrite_request_alter(&$request) {
  // Check if there is a group context
  if ($group_node = og_get_group_context()) {
    // Check which method of auth is being used for this group
    if ($group_node->eventbrite_og_enabled) {
      switch ($request->op) {
        case 'user_list_events':
        case 'event_get':
        case 'event_new':
        case 'event_update':
        case 'ticket_new':
        case 'ticket_update':
        case 'user_list_venues':
        case 'user_list_organizers':
          $request->module = 'eventbrite_og';
          $request->user_key = $group_node->eventbrite_og_user_key;
          break;
        default:
           // Don't make replacements if the $request->op didn't match the list
      }
    }
  }
}

function eventbrite_og_get_enabled_organizers($group_node) {
  switch ($group_node->eventbrite_og_enabled) {
    case EVENTBRITE_OG_CUSTOM:
      // If there is no group context, set it--it is needed to get custom organizers from Eventbrite
      if (!og_get_group_context()) {
        og_set_group_context($group_node);
      }
      if ($custom_organizers = eventbrite_get('user_list_organizers')) {
        return array_keys($custom_organizers);
      }
      break;
    case EVENTBRITE_OG_SUBUSER:
      if (module_exists('eventbrite_subuser')) {
        // TODO: Fill in organizer from subuser
        $subuser = eventbrite_subuser_load($group_node->eventbrite_og_user_key, 'user_key');
        return $subuser->enabled_organizers;
      }
      break;
  }  
}

function eventbrite_og_get_enabled_venues($group_node) {
  switch ($group_node->eventbrite_og_enabled) {
    case EVENTBRITE_OG_CUSTOM:
      // If there is no group context, set it--it is needed to get custom venues from Eventbrite
      if (!og_get_group_context()) {
        og_set_group_context($group_node);
      }
      if ($custom_venues = eventbrite_get('user_list_venues')) {
        return array_keys($custom_venues);
      }
      break;
    case EVENTBRITE_OG_SUBUSER:
      if (module_exists('eventbrite_subuser')) {
        // TODO: Fill in venues from subuser
        $subuser = eventbrite_subuser_load($group_node->eventbrite_og_user_key, 'user_key');
        return $subuser->enabled_venues;
      }
      break;
  }  
}

